class_name EntityManager
extends Node2D



## Entity Manager is to be a child of the UserInteractableTileMapLayer
## This allows access to the path generated by the pathing component
##
## Add entities as children of this node
##
## This script is used to spawn entities and send them down the path.
## Also keeps track of entities


# pre-load scenes for enemy types
@onready var enemy_type: Dictionary = {
	"BaseEntity": load("res://Scenes/Components/Entities/BaseEntity.tscn"),
	"OtherEntity": load("res://Scenes/Components/Entities/OtherEntity.tscn")
}

# set as parent
@onready var userInteractableTileMapLayer: UserInteractableTilemapLayer = $".."

# TESTING
@onready var spawnEntityButton: Button = %SpawnEntityButton

var startCoord: Vector2

# keep count of alive entities
# increment when spawn entity
# decrement when deleting entity
var entitiesCount: int = 0

func _ready() -> void:
	if spawnEntityButton != null:
		spawnEntityButton.button_up.connect(spawnAndSendOutEntity)

# make sure the the path is valid and generated before calling this
func getPath() -> PackedVector2Array:
	return userInteractableTileMapLayer.pathingComponent.getPath()

func spawnAndSendOutEntity() -> void:
	entitiesCount += 1
	var testEntityInstance: Entity = load("res://Scenes/Components/BaseEntity.tscn").instantiate()
	# NOTE - need to add to scene first to allow certain variables to initialize
	add_child(testEntityInstance)
	testEntityInstance.setup(getPath())
	testEntityInstance.startMoving()


## Spawn entity by name
func spawnEntity(name: String, config: Dictionary = {}) -> void:
	entitiesCount += 1
	var etype = enemy_type[name]
	if etype == null:
		print("".join(["Unknown enemy type: ", name]))
		return
	var instance: Entity = etype.instantiate()
	add_child(instance)
	instance.setup(getPath())
	instance.configure(config)
	instance.startMoving()
	
	
	
