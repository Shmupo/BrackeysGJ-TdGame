class_name EntityManager
extends Node2D

signal allEnemiesDead

## Entity Manager is to be a child of the UserInteractableTileMapLayer
## This allows access to the path generated by the pathing component
##
## Add entities as children of this node
##
## This script is used to spawn entities and send them down the path.
## Also keeps track of entities


# pre-load scenes for enemy types
@onready var enemy_type: Dictionary = {
	"BaseEntity": preload("res://Scenes/Components/Entities/BaseEntity.tscn"),
	"OtherEntity": preload("res://Scenes/Components/Entities/OtherEntity.tscn"),
	"KnightEntity": preload("../../Scenes/Components/Entities/KnightEntity.tscn"),
	"WizardEntity": preload("res://Scenes/Components/Entities/WizardEntity.tscn"),
}

# set as parent
@onready var userInteractableTileMapLayer: UserInteractableTilemapLayer = $".."

var startCoord: Vector2

var more_entities_in_wave: bool = true

# make sure the the path is valid and generated before calling this
func getPath() -> PackedVector2Array:
	return userInteractableTileMapLayer.pathingComponent.getPath()

func get_num_alive_entities() -> int:
	var childs = get_children()
	var num_alive = 0
	for c in childs:
		if c.is_in_group("EnemyGroup") && !c.is_dead:
			num_alive += 1
	return num_alive

func onEntityDeath() -> void:
	if !more_entities_in_wave && get_num_alive_entities() == 0:
		allEnemiesDead.emit()
	#print("NumEntities: " + str(numEntities))

## Spawn entity by name
func spawnEntity(name: String, config: Dictionary = {}) -> void:
	var etype = enemy_type[name]
	if etype == null:
		print("".join(["Unknown eenemy type: ", name]))
		return
	var instance: Entity = etype.instantiate()
	add_child(instance)
	instance.setup(getPath())
	instance.configure(config)
	instance.startMoving()
	
	instance.died.connect(onEntityDeath)


func _on_wave_manager__on_wave_end() -> void:
	more_entities_in_wave = false


func _on_wave_manager__on_wave_start() -> void:
	more_entities_in_wave = true
